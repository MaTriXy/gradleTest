
plugins {
	id 'com.gradle.build-scan' version '1.0'
    id 'groovy'
    id 'maven'
    id 'org.ysb33r.bintray' version '1.5'
    id 'com.jfrog.artifactory' version '3.1.0'
    id 'com.gradle.plugin-publish' version '0.9.4'
    id 'com.github.hierynomus.license' version '0.13.1'
}

apply from : 'gradle/integration-tests.gradle'

group = 'org.ysb33r.gradle'
archivesBaseName = 'gradletest'
version = '1.0-beta1'

sourceCompatibility = 1.6
targetCompatibility = 1.6

plugins.withType(JavaPlugin) {

	project.tasks.withType(JavaCompile) { task ->
		task.sourceCompatibility = project.sourceCompatibility
		task.targetCompatibility = project.targetCompatibility
	}

	project.tasks.withType(GroovyCompile) { task ->
		task.sourceCompatibility = project.sourceCompatibility
		task.targetCompatibility = project.targetCompatibility
	}
}

ext {
	bintrayOwner = 'ysb33r'
	bintrayRepo = 'grysb33r'
	moduleName = 'gradletest-gradle-plugin'
}

repositories {
	jcenter()

	ivy {
		name 'Downloader for Gradle distributions'
		url 'https://services.gradle.org/distributions'
		resolve.dynamicMode = false
		layout 'pattern', {
			artifact '[artifact]-[revision]-[classifier].zip'
		}
	}
}

ext {
    depCommonsIO = 'commons-io:commons-io:2.5'
    depSpock = "org.spockframework:spock-core:1.0-groovy-${GroovySystem.version.replaceAll(/\.\d+$/,'')}"
}

dependencies {
	compile gradleApi()
	compile localGroovy()
	compile depCommonsIO

	testCompile (depSpock) {
		exclude module : 'groovy-all'
	}
	integrationTestCompile gradleTestKit()

	integrationTestDistro2_1 ':gradle:2.1:bin@zip'
    integrationTestDistro2_5 ':gradle:2.5:bin@zip'
    integrationTestDistro2_8 ':gradle:2.8:bin@zip'
    integrationTestDistro2_9 ':gradle:2.9:bin@zip'
    integrationTestDistro2_13 ':gradle:2.13:bin@zip'
	integrationTestRepo 'commons-cli:commons-cli:1.2'
	integrationTestRepo 'org.ysb33r.gradle:doxygen:0.2'

    integrationTestRepo depCommonsIO
    // This dependency must match the one in src/main/groovy/org/ysb33r/gradle/gradletest/internal/TestSet.groovy
    integrationTestRepo (depSpock) {
        exclude module : 'groovy-all'
    }
}

groovydoc {
    windowTitle 'GradleTest Plugin for Gradle'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	description "An archive of the JavaDocs for Maven Central"
	classifier "javadoc"
	from groovydoc //Javadoc
}


artifacts {
	archives sourcesJar
	archives javadocJar
}

jar {
	manifest {
		attributes 'Implementation-Title': moduleName, 'Implementation-Version': version
	}
}

test {
	systemProperties TESTROOT : "${buildDir}/tmp/testroot"
}

task integrationTestRepo( type : Copy ) {
    from {configurations.integrationTestRepo.files}
    from {configurations.integrationTestDistro2_1.files}
    from {configurations.integrationTestDistro2_5.files}
    from {configurations.integrationTestDistro2_8.files}
    from {configurations.integrationTestDistro2_9.files}
    from {configurations.integrationTestDistro2_13.files}
    into "${buildDir}/integrationTest/repo"
}

task createIntegrationTestClasspathManifest {

    ext {
        outputDir = file("$buildDir/integrationTest/manifest")
    }

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }

    dependsOn integrationTestClasses
}

test {
    dependsOn integrationTestRepo
    systemProperties GRADLETESTREPO : file("${buildDir}/integrationTest/repo")
}

integrationTest {

    dependsOn integrationTestRepo, createIntegrationTestClasspathManifest

    systemProperties TESTPROJECTSRCDIR : "${buildDir}/resources/integrationTest/gradleTest"
    systemProperties GRADLETESTDIST : configurations.integrationTestDistro2_1.files[0]
    systemProperties GRADLETESTREPO : file("${buildDir}/integrationTest/repo")
    systemProperties PLUGIN_METADATA_FILE : file("${createIntegrationTestClasspathManifest.outputDir}/plugin-classpath.txt")
	systemProperties PROJECTROOT : projectDir

	if(gradle.startParameter.offline) {
		systemProperties OFFLINE:'1'
	}

}

task compatibilityTest( type : GradleBuild ) {
    group 'Compatibility'
    description 'Runs the plugin against most Gradle 2.0+ releases'
    dependsOn integrationTestRepo,jar
    mustRunAfter test,integrationTest

    tasks = ['gradleTest']
    dir = file("${projectDir}/compatibility")
    buildFile = 'compatibility/compatibility.gradle'

    onlyIf { !gradle.startParameter.offline }
}

artifactory {
	publish {
		contextUrl = 'http://oss.jfrog.org'
		repository {
			repoKey = 'oss-snapshot-local'
			username = project.properties.bintrayUserName
			password = project.properties.bintrayApiKey
		}
	}
}

artifactoryPublish {
	onlyIf { version.endsWith("SNAPSHOT") }
}

uploadArchives  {
	repositories {
		bintrayMavenDeployer {
			username    project.properties.bintrayUserName
			apiKey      project.properties.bintrayApiKey
			repoOwner   bintrayOwner
			repoName    bintrayRepo
			packageName moduleName
			description 'A plugin that helps you test your plugin against a variety of Gradle versions'
			tags        'testing','integrationTesting','compatibilityTesting','gradle'
			licenses          'Apache-2.0'
			vcsUrl            'https://github.com/ysb33r/gradleTest.git'
			autoCreatePackage true
			updatePackage     true
			versionAttributes 'gradle-plugin' : "org.ysb33r.gradletest:${group}:${archivesBaseName}"
		}
	}

	onlyIf { !version.endsWith("-SNAPSHOT") }
    mustRunAfter compatibilityTest
}

pluginBundle {
	description = 'A plugin that helps you test your plugin against a variety of Gradle versions'
	website     = 'https://github.com/ysb33r/gradleTest'
	vcsUrl      = 'https://github.com/ysb33r/gradleTest.git'

	tags = ['testing','integrationTesting','compatibility']

	plugins {
		gradletestPlugin {
			id = 'org.ysb33r.gradletest'
			displayName = 'Plugin for compatibility testing of Gradle plugins'
		}
	}

	mavenCoordinates {
		groupId = project.group
		artifactId = 'gradletest'
	}

}

publishPlugins {
	onlyIf { !version.endsWith("SNAPSHOT") }
    mustRunAfter compatibilityTest
}

license {
	header = rootProject.file('config/HEADER')
	strictCheck = true
	ignoreFailures = false
	ext.year = '2015 - 2016'
	excludes(['**/*.ad', '**/*.asciidoc', '**/*.adoc', '**/*.md','**/*.properties'])
    mapping 'gradle', 'SLASHSTAR_STYLE'
}

buildScan {
	licenseAgreementUrl = 'https://gradle.com/terms-of-service'
	licenseAgree = 'yes'
}

if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

task release {
    onlyIf { !version.endsWith('-SNAPSHOT') }
    dependsOn build, compatibilityTest, publishPlugins, uploadArchives
}