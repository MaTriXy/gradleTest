// We have a property to help in case of when the code is so broken that we cannot
// even load it and as such prevents the rest of the code being built and tested.
// If you pass -PDISABLE_GRADLETEST=1 on the command-line then the gradleTest task
// will be disabled

if(!project.properties.DISABLE_GRADLETEST) {

    // This might be confusing to people who have used the self-referencing trick before
    // Gradle does not directly make JARs in the lib/plugins fodler available at this point in the gradle script.
    // Therefore we need to create new classloader and add the jar we need.
    def selfReferencingClassLoader = new URLClassLoader(
        [ new File("${gradle.gradleHomeDir}/lib/plugins/gradle-plugins-${gradle.gradleVersion}.jar").toURI().toURL()].toArray(new URL[1]),
        project.gradle.class.classLoader as URLClassLoader
    )

    apply plugin: new GroovyScriptEngine(
        ['src/main/groovy', 'src/main/resources'].
            collect { file(it).absolutePath }.toArray(new String[2]),
        selfReferencingClassLoader
    ).loadScriptByName('org/ysb33r/gradle/gradletest/GradleTestPlugin.groovy')

    gradleLocations {
        if( System.getenv('APPVEYOR') || project.properties.TRAVIS_CI?.size()) {
            downloadToGradleUserHome = false
            searchGradleUserHome = true
            searchGvm = false
        } else {
            downloadToGradleUserHome = true
        }
    }

    gradleTest {
        versions '2.0', '2.1', '2.2', '2.3', '2.4'
        dependsOn 'integrationTest', 'test'
    }

    dependencies {
        gradleTest jar.outputs.files
    }
}
