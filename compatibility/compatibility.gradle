
// ----------------------------------------------------------------------------
// This build script bends corners to get the latest version of GradleTest to
// be tested by itself:
//
// - This build script is detached from the calling project and the latter
//   be accessed as a rootProject as would be the normal convention.
// - We redirect the build directory to be underneath the calling project's
//   build directory.
// - Any test dpenedencie/Users/schalkc/Projects/GradleTest/compatibility/compatibility.gradles are picked up from the test dependencies of the
//   calling project.
// - We need to run this project with the GradleTest jar that was created by
//   the calling project
// - We also need to tell the gradleTestGenerator where to find the GradleTest
//   jar. (This is not something a consumer of this plugin would normally do.)
// - We have also added a sanity check to ensure there is not more than one
//   gradletest plugin JAR in the folder. Although we can check this at the level
//   of this build script, further down the chain it cannot be done, therefore
//   the sanityCheck task will fail the build if need be.
// ----------------------------------------------------------------------------


buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath fileTree("${projectDir}/../build/libs") { include "gradletest-${compatibilityVersion}.jar"}
        classpath "gradle.plugin.org.ysb33r.gradle:gradle-cloudci-plugin:2.2"
    }
}

buildDir = file("${projectDir}/../build/compatibilityTest")

repositories {
    flatDir {
        dirs "${projectDir}/../build/integrationTest/repo"
    }
}


// tag::applyplugin1[]
apply plugin : 'org.ysb33r.gradletest'
// end::applyplugin1[]


apply plugin : 'java'
apply plugin : 'org.ysb33r.cloudci'

gradleTestGenerator {
    pluginJarDirectory = file("${projectDir}/../build/libs")
}

task sanityCheck {
    inputs.files fileTree("${projectDir}/../build/libs") {
        include "gradletest-*.jar"
        exclude "gradletest-*-javadoc.jar"
        exclude "gradletest-*-sources.jar"
    }

    doFirst {
        if(inputs.files.files.size() > 1) {
            throw new GradleException( 'More than one gradletest plugin JAR was found. Run clean first or delete offending JARs' )
        }
    }
}


// *IMPORTANT* If you update this list also update .travis.yml & appveyor.yml
// tag::applyplugin2[]
gradleTest {
// end::applyplugin2[]
    dependsOn sanityCheck
    systemProperties = [:]
// tag::applyplugin2[]
    versions '4.0.2', '4.1', '4.2.1', '4.3.1', '4.4.1'
    versions '3.5', '3.4.1'
    versions '3.3', '3.2.1', '3.1', '3.0'

    beforeTest {
        println "  ${it.name}"
    }
}
// end::applyplugin2[]

cloudci {
    appveyor {
        gradleTest {
            if (JavaVersion.current().isJava7()) {
                jvmArgs '-XX:+CMSClassUnloadingEnabled', '-XX:+CMSPermGenSweepingEnabled',
                    '-XX:+UseConcMarkSweepGC'
            }

            maxParallelForks = 2
            minHeapSize = "256m"
            maxHeapSize = "768m"
        }
    }

    travisci {
        gradleTest {
            maxParallelForks = 2
            minHeapSize = "256m"
            maxHeapSize = "768m"
        }
    }
}


test.enabled = false

// *IMPORTANT* If you update this list also update .travis.yml & appveyor.yml
// tag::addTestSets[]
additionalGradleTestSet 'kotlin' // <1>

kotlinGradleTest { // <2>
    versions '4.0.2', '4.1', '4.2.1' // <3>
    versions '4.3.1', '4.4.1'
}

kotlinGradleTestGenerator { // <4>
    pluginJarDirectory = gradleTestGenerator.pluginJarDirectory
}

kotlinGradleTest {
    dependsOn sanityCheck
    systemProperties = [:]

    beforeTest {
        println "  ${it.name}"
    }
}
// end::addTestSets[]

