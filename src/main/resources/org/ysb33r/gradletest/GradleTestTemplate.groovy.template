package ${TESTPACKAGE}

import org.junit.Rule
import org.junit.rules.TemporaryFolder
import org.apache.commons.io.FileUtils
import org.gradle.testkit.runner.GradleRunner
import org.gradle.util.GradleVersion
import org.gradle.testkit.runner.TaskOutcome
import spock.lang.Specification
import spock.lang.Unroll

class ${TESTNAME}CompatibilitySpec extends Specification {

    static final File SOURCEDIR = new File('${SOURCEDIR}'.toURI())
    static final File CP_MANIFEST = new File('${MANIFEST}'.toURI())
    static final File WORKDIR = new File('${WORKDIR}'.toURI())

    static final String DISTRIBUTION_URI = System.getProperty('org.ysb33r.gradletest.distribution.uri') ?: '${DISTRIBUTION_URI}'
    static final List<String> gradleArguments = [${ARGUMENTS}]
    static List<File> pluginClasspath
    static String buildscriptClasspath

    File testProjectDir
    File buildFile
    GradleRunner gradleRunner

    void setupSpec() {
        if(!WORKDIR.exists()) {
            WORKDIR.mkdirs()
        }

        pluginClasspath = CP_MANIFEST.readLines().collect {
            new File(it)
        }

        buildscriptClasspath = 'buildscript { dependencies { classpath files(' +
            CP_MANIFEST.readLines().collect { "'" + it + "'" }.join(',') +
            ') } }' + "\\n\\n"
    }

    void setupForVersion(final String version) {
        final GradleVersion gradleVersionUnderTest = GradleVersion.version(version)
        testProjectDir = new File(WORKDIR,'${TESTNAME}/' + version)
        if(testProjectDir.exists()) {
          testProjectDir.deleteDir()
        }
        testProjectDir.mkdirs()
        FileUtils.copyDirectory(SOURCEDIR,testProjectDir)
        final File settings = new File(testProjectDir,'settings.gradle')
        if(!settings.exists()) {
            settings.text = ''
        }
        gradleRunner = GradleRunner.create()
                       .withProjectDir(testProjectDir)
                       .forwardOutput()

       if( DISTRIBUTION_URI.empty ) {
           gradleRunner.withGradleVersion(version)
       } else {
           final String uri = DISTRIBUTION_URI + '/gradle-' + version + '-bin.zip'
           gradleRunner.withGradleDistribution(uri.toURI())
       }
       gradleRunner.withArguments(getArguments(gradleVersionUnderTest,version))
       addClasspath(gradleVersionUnderTest,version)
    }

    List<String> getArguments(final GradleVersion gradleVersionUnderTest,final String version) {
        List<String> args = gradleArguments + []
        args.add( (gradleVersionUnderTest > GradleVersion.version('2.2')) ? '--console=plain' : '--no-color')
        args
    }

    void addClasspath(final GradleVersion gradleVersionUnderTest,final String version) {
        if( gradleVersionUnderTest >= GradleVersion.version('2.8') ) {
            gradleRunner.withPluginClasspath(pluginClasspath)
        } else {
            File buildScript = new File(testProjectDir,'build.gradle')
            String newScript = buildscriptClasspath.replaceAll(/1.0-groovy-2.4/,'1.0-groovy-2.3') + buildScript.text
            buildScript.text = newScript
        }
    }

    @Unroll
    def "${TESTNAME} : #version"() {
        setup:
        final GradleVersion gradleVersionUnderTest = GradleVersion.version(version)
        setupForVersion(version)

        when:
        println 'I am about to run the test project with Gradle ' + version + ' and I am ' + GradleVersion.current()
        def result = gradleRunner.build()

        then:
        if(gradleVersionUnderTest >= GradleVersion.version('2.5')) {
            result.task(':${DEFAULTTASK}')?.outcome == TaskOutcome.SUCCESS
        } else {
            !result.output.matches(':${DEFAULTTASK} (SKIPPED|UP-TO-DATE|FAILED)')
        }

        where:
        version << [${VERSIONS}]
    }
}